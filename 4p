#!/usr/bin/perl

use MATH::Trig;

$TICS_PER_METER = 19685.0;
$MAX_TRACES = 16;
$MAX_SECTIONS = 4096;

#
# Parse data input ino comma separated strings.
#
while(<>) {
    chomp();
    push(@strings, $_);
}

$num_sections = $#strings;

#
# Loop through all the sections.
#
$section = 0;
while($section <= $num_sections) {

    #
    # Start function on previous section.
    # Wrap around to the end for first section.
    #
    $jj = $section - 1;
    if($jj < 0) {
	$jj = $num_sections;
    }

    #
    # 4 values define 4 factors.
    # build up 4x2 matrix
    #
    foreach $x (0..3) {

	#
	# Wrap around to start.
	#
	if($jj > $num_sections) {
 	    $jj = 0;
    }

	@t = split(/, /, $strings[$jj++]);


	#
	# Store length, x, and y
	#
	$M[$x]{l} = $t[1];
	$M[$x]{x} = $t[2];
	$M[$x]{y} = $t[3];

 	print "r[$x] = $M[$x]{x}, Y=$M[$x]{y} L=$M[$x]{l}\n";
    }

#     #
#     # Set x relative to 0 for start.
#     #
#     if($section == 0) {
# 	$M[0]{x} = -1 * $M[0]{l};
#     }
    

    #
    # X locations relative to 0
    #
    foreach $x (0..3) {
	print "$M[$x]{x} $M[$x]{y}\n";
    }
    print "\n\n";

    $slope_left  = ($M[1]{y} - $M[0]{y}) / ($M[1]{x} - $M[0]{x});
    $slope_mid   = ($M[2]{y} - $M[1]{y}) / ($M[2]{x} - $M[1]{x});
    $slope_right = ($M[3]{y} - $M[2]{y}) / ($M[3]{x} - $M[2]{x});

    print "left =  ($M[1]{y} - $M[0]{y}) / ($M[1]{x} - $M[0]{x}) = $slope_left;\n";
    print "mid =   ($M[2]{y} - $M[1]{y}) / ($M[2]{x} - $M[1]{x}) = $slope_mid;\n";
    print "right = ($M[3]{y} - $M[2]{y}) / ($M[3]{x} - $M[2]{x}) = $slope_right;\n";
    

    $S0 = ($slope_mid + $slope_left) / 2.0;
    $SL = ($slope_right + $slope_mid) / 2.0;

    print "S0=$S0\n";
    print "SL=$SL\n";

    $L = $M[2]{x} - $M[1]{x};
    print "L=$L\n";

    $Y0 = $M[1]{y};
    $YL = $M[2]{y};

    $params{d} = $Y0;
    $params{c} = $S0;

    $params{a} = 1.0 / $L**3 * ($L * ($S0 + $SL) + 2.0 * ($Y0 - $YL));
    print "params{a} = 1.0 / $L**3 * ($L * ($S0 + $SL) + 2.0 * ($Y0 - $YL)) = $params{a};\n";

    $params{b} = (1.0 / $L**2) * ($L * (-2.0 * $S0 - $SL) - 3.0 * ($Y0 - $YL));
    print "$params{b} = (1.0 / $L**2) * ($L * (-2.0 * $S0 - $SL) - 3.0 * ($Y0 - $YL)) = $params{b}\n";

    $all_params[$section]{a} = $params{a};
    $all_params[$section]{b} = $params{b};
    $all_params[$section]{c} = $params{c};
    $all_params[$section]{d} = $params{d};

    $all_geo[$section]{L} = $M[1]{l};
    $all_geo[$section]{L_tics} = sprintf("%d", $TICS_PER_METER * $M[1]{l});
    $all_geo[$section]{X} = $M[1]{x};

    print "f(x) = $params{a}*x**3 +  $params{b}*x**2 +  $params{c}*x +  $params{d}\n";
    print "f(0) = $params{d}\n";

    $f1 =  $params{a} * $M[1]{x}**3 + $params{b} * $M[1]{x}**2 + $params{c} * $M[1]{x} + $params{d};
    print "f($M[1]{x}) = $f1\n";

    foreach $x (0..3) {
	   printf("%12g %12g\n", $M[$x]{x}, $M[$x]{y});
    }

    $f0_prime =  $params{c};
    $f1_prime = 3 * $params{a} * $M[2]{x}**2 + 2 * $params{b} * $M[1]{x} + $params{c};

    print "f_prime(0) = $f0_prime\n";
    print "f_prime($M[2]{x}) = $f1_prime\n";

    $section++
}
 

$track_length = $all_geo[$num_sections]{X} + $all_geo[$num_sections]{L};





#
# Create plot file(s) for gnuplot
#
open(PLOT, ">", "__do_plot_all.txt") or
    die "unable to generate data __do_plot_all.txt\n";
    
foreach $x (0..$num_sections) {
    print PLOT "f_$x(x) = $all_params[$x]{a}*x**3 + $all_params[$x]{b}*x**2 + $all_params[$x]{c}*x + $all_params[$x]{d}\n";
}

print PLOT "set xrange [0:$track_length]\n";
print PLOT "plot sample \\\n";

#
# plot 20 at a time to keep the chaos down. 
#
foreach $x (0..$num_sections) {
   $x_0 = $all_geo[$x]{X};
   $x_1 = ($all_geo[$x]{L} + $all_geo[$x]{X});
   print PLOT "     [${x_0}:${x_1}] f_$x(x-${x_0})";

   if($x < $num_sections) {
      unless($x &&
	     (($x % 20) == 0) ||
	     ($num_sections - x < 20)) {
	      
         print PLOT ", \\";
      }
   }
   print PLOT "\n";

   if($x && ($x % 20) == 0) {
      print PLOT "pause -1";
      print PLOT "\n";
      print PLOT "\n";
      print PLOT "plot sample \\\n";
   }
}
print PLOT "pause -1";
print PLOT "\n";
print PLOT "\n";

close(PLOT);

open(GTK_TXT, ">", "__gtk_csv.TXT") or
    die "Unable to open __gtk_csv.TXT\n";

foreach $x (0..$num_sections) {
#   print GTK_TXT "gradient_angle_0 = atan2($all_params[$x]{c}, $all_geo[$x]{L_tics})\n";
   $gradient_angle_0 = atan2($all_params[$x]{c}, $all_geo[$x]{L_tics});
   print GTK_TXT "$x, $all_geo[$x]{L_tics}, $all_params[$x]{d} , $all_params[$x]{a} , $all_params[$x]{b} , $all_params[$x]{c}, $gradient_angle_0";
   print GTK_TXT ", $all_geo[$x]{L_tics}, $all_params[$x]{d} , $all_params[$x]{a} , $all_params[$x]{b} , $all_params[$x]{c}, $gradient_angle_0";
   for($ii = 2; $ii < $MAX_TRACES; $ii++) {
      print GTK_TXT ", 0, 0, 0, 0, 0, 0.0";
   }
   print GTK_TXT "\n";
}

close (GTK_TXT);
