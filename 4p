#!/usr/bin/perl

#
# Parse data input ino comma separated strings.
#
while(<>) {
    chomp();
    push(@strings, $_);
}

#
# Loop through all the sections.
#
$section = 0;
$track_length = 0;
while($section <= $#strings) {

    #
    # Start function on previous section.
    # Wrap around to the end for first section.
    #
    $jj = $section - 1;
    if($jj < 0) {
	$jj = $#strings;
    }

    #
    # 4 values define 4 factors.
    # build up 4x2 matrix
    #
    foreach $x (0..3) {

	#
	# Wrap around to start.
	#
	if($jj > $#strings) {
 	    $jj = 0;
	}

	@t = split(/,/, $strings[$jj++]);


	#
	# Store length, x, and y
	#
	$M[$x]{l} = $t[0];
	$M[$x]{x} = $t[1];
	$M[$x]{y} = $t[2];

	if($jj == $#strings) {
	    $track_length = $M[$x]{x};
	}

 	print "r[$x] = $M[$x]{x}, $M[$x]{y}\n";
    }

    #
    # Set x relative to 0 for start.
    #
    if($section == 0) {
	$M[0]{x} = -1 * $M[0]{l};
    }

    #
    # Create data file for gnuplot
    #
    open(PARAMS, ">", "__params.txt") or
	die "unable to generate data __params.txt\n";
    

    #
    # X locations relative to 0
    #
    foreach $x (0..3) {
	print "$M[$x]{x} $M[$x]{y}\n";
    }
    print("\n\n");

    $slope_left  = ($M[1]{y} - $M[0]{y}) / ($M[1]{x} - $M[0]{x});
    $slope_mid   = ($M[2]{y} - $M[1]{y}) / ($M[2]{x} - $M[1]{x});
    $slope_right = ($M[3]{y} - $M[2]{y}) / ($M[3]{x} - $M[2]{x});

    print "left =  ($M[1]{y} - $M[0]{y}) / ($M[1]{x} - $M[0]{x}) = $slope_left;\n";
    print "mid =   ($M[2]{y} - $M[1]{y}) / ($M[2]{x} - $M[1]{x}) = $slope_mid;\n";
    print "right = ($M[3]{y} - $M[2]{y}) / ($M[3]{x} - $M[2]{x}) = $slope_right;\n";
    

    $S0 = ($slope_mid + $slope_left) / 2.0;
    $SL = ($slope_right + $slope_mid) / 2.0;

    print "S0=$S0\n";
    print "SL=$SL\n";

    $L = $M[2]{x} - $M[1]{x};
    print "L=$L\n";

    $Y0 = $M[1]{y};
    $YL = $M[2]{y};

    $params{d} = $Y0;
    $params{c} = $S0;

    $params{a} = 1.0 / $L**3 * ($L * ($S0 + $SL) + 2.0 * ($Y0 - $YL));
    print "params{a} = 1.0 / $L**3 * ($L * ($S0 + $SL) + 2.0 * ($Y0 - $YL)) = $params{a};\n";

    $params{b} = (1.0 / $L**2) * ($L * (-2.0 * $S0 - $SL) - 3.0 * ($Y0 - $YL));
    print "$params{b} = (1.0 / $L**2) * ($L * (-2.0 * $S0 - $SL) - 3.0 * ($Y0 - $YL)) = $params{b}\n";

    $all_params[$section]{a} = $params{a};
    $all_params[$section]{b} = $params{b};
    $all_params[$section]{c} = $params{c};
    $all_params[$section]{d} = $params{d};

    print "f(x) = $params{a}*x**3 +  $params{b}*x**2 +  $params{c}*x +  $params{d}\n";
    print "f(0) = $params{d}\n";

    $f1 =  $params{a} * $M[1]{x}**3 + $params{b} * $M[1]{x}**2 + $params{c} * $M[1]{x} + $params{d};
    print "f($M[1]{x}) = $f1\n";

    foreach $x (0..3) {
	printf("%12g %12g\n", $M[$x]{x}, $M[$x]{y});
    }

    $f0_prime =  $params{c};
    $f1_prime = 3 * $params{a} * $M[2]{x}**2 + 2 * $params{b} * $M[1]{x} + $params{c};

    print "f_prime(0) = $f0_prime\n";
    print "f_prime($M[2]{x}) = $f1_prime\n";

    $section++
}
 
foreach $x (0..$#strings) {
    print "f_$x(x) = $all_params[$x]{a}*x**3 + $all_params[$x]{b}*x**2 + $all_params[$x]{c}*x + $all_params[$x]{d}\n";
}


foreach $x (0..$#strings) {
    @t = split(/,/, $strings[$jj++]);

    foreach $y (@t) {
	printf "%12g", $y;
    }
    print "\n";
}



      


	  

    
